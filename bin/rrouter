#!/usr/bin/env node
'use strict';

var path                 = require('path');
var nomnpm               = require('nomnom');
var webpack              = require('webpack');
var webpackDevMiddleware = require('webpack-dev-middleware');
var express              = require('express');

var opts = nomnpm
  .script('rrouter')
  .option('entry', {position: 0, required: true})
  .option('version', {
    flag: true,
    abbr: 'v',
    help: 'print version and exit',
    callback: function() {
      return require('../package.json').version;
    }
  })
  .option('prerender', {
    flag: true,
    help: 'pre-render UI on server',
    callback: function() {
      throw new Error('not implemented');
    }
  })
  .parse();

function makeApp(entry, options) {
  var app = express();
  var compiler = webpack({
    entry: [
      'expose?ENTRY!' + path.resolve(entry),
      'expose?React!react',
      'expose?RRouter!' + __dirname + '/../',
    ],
    bail: true,
    output: {
      path: '/bundle',
      filename: 'bundle.js',
      publicPath: '/bundle'
    },
    devtool: 'source-map',
    module: {
      loaders: [
        {test: /\.css$/,  loader: 'style!css'},
        {test: /\.png$/,  loader: 'url-loader?mimetype=image/png'},
        {test: /\.woff$/, loader: 'url-loader?prefix=font/&limit=5000&mimetype=application/font-woff' },
        {test: /\.ttf$/,  loader: 'file-loader?prefix=font/'},
        {test: /\.eot$/,  loader: 'file-loader?prefix=font/'},
        {test: /\.svg$/,  loader: 'file-loader?prefix=font/'},
        {test: /\.js$/,   loader: 'jsx-loader?harmony'}

      ]
    }
  });

  app.use(webpackDevMiddleware(compiler, {
    publicPath: '/bundle',
    quiet: true
  }));

  app.use(function(req, res, next) {
    res.write('<!doctype html>\n');
    res.write('<body>\n');
    res.write('<script src="/bundle/bundle.js"></script>\n');
    res.write(compile(start));
    res.write('</body>\n');
    res.end();
  });

  return app;
}

function start() {
  if (React.isValidClass(ENTRY)) {
    React.renderComponent(ENTRY(), document.body);
  } else if (RRouter.isRoutes(ENTRY)) {
    RRouter.start(ENTRY, function(view) {
      React.renderComponent(view, document.body);
    });
  } else {
    console.error("don't know how to start app:", ENTRY);
  }
}

function compile(func) {
  return '<script>\n(' + func.toString() + ')();\n</script>\n';
}

if (opts.version) {
  console.log(opts.version);
  process.exit(0);
}

makeApp(opts.entry).listen(3000, function() {
  console.log('Started `' + opts.entry + '` app on http://localhost:3000/');
});
